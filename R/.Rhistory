library(tensorflow)
library(keras)
library(wateRtemp)
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
forecast <- read.table(file = "Basel.csv", header = TRUE, sep = ",")
data$DateTime <- strptime(data$DateTime, format = "%Y-%m-%d")
data$sin <- sin(pi / 180 * data$Elev)
data$prod <- data$Einspeisung+data$Batterieladung+data$Direktverbrauch
data$rad <- NA
data$cloudcover <- NA
data$maxtemp <- NA
data$meantemp <- NA
data$rad <- clim$solarradiation[-c(1:12)]
data$cloudcover <- clim$cloudcover[-c(1:12)]
data$maxtemp <- clim$tempmax[-c(1:12)]
data$meantemp <- clim$temp[-c(1:12)]
head(data)
forecast$sin <- sin(pi / 180 * forecast$Elev)
forecast1 <- cbind((forecast[,7]),forecast[,5], forecast[,4],forecast[,2], forecast[,3])
colnames(forecast1) <- c("sin", "rad", "cloudcover", "maxtemp", "meantemp")
forecast1 <- as.matrix(forecast1)
forecast2 <- cbind((forecast[,7]), forecast[,4],forecast[,2], forecast[,3])
colnames(forecast2) <- c("sin", "cloudcover", "maxtemp", "meantemp")
forecast2 <- as.matrix(forecast2)
calib <- 1:370
valid <- 371:414
mean <- lapply(data[calib,c(15:16,18:20)], FUN = "mean",2)
sd <- lapply(data[calib,c(15:16,18:20)], FUN = "sd",2)
data.scale <- scale(data[calib,c(15,16,18:20)])
data.scale.bs <- array(dim=c(363,8,5),data = NA)
for (i in 1:8) {
data.scale.bs[,i,] <- data.scale[(9-i):(371-i),]
}
y <- data[calib,16]
y1 <- matrix(data = y, nrow = 370, ncol = 1)
data.tm <- array(dim = c(8,363,5))
for (i in 1:8) {
data.tm[i,,] <- data.scale.bs[,i,]
}
lstm_mod <- keras_model_sequential()
lstm_mod <- layer_lstm(object = lstm_mod, units = 40, return_sequences = TRUE) %>%
layer_dropout(rate = 0.2) %>%
layer_lstm(units = 80) %>%
#  layer_lstm(units = 10) %>%
layer_dense(units = 1)
compile(lstm_mod, optimizer = "rmsprop", loss = "mse", metrics = "mse")
history_lstm <- fit(object = lstm_mod, x=data.scale.bs[,,-2], y=data.scale.bs[,1,2],
epochs = 15, verbose = 1, shuffle = FALSE, batch_size = 4,
validation_split = 0.15)
rm(list=ls())
gc()
library(rstudioapi)
library(xgboost)
#library(transformer)
#library(attention)
library(tensorflow) #read documentation for installation
library(keras) #read documentation for installation
#library(wateRtemp)
library(data.table)
if(!'rstudioapi'%in%installed.packages()){
install.packages('rstudioapi')
}
rm(list=ls())
gc()
library(rstudioapi)
library(xgboost)
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
library(jsonlite)
.libPaths(C:/Users/benme/AppData/Local/R/win-library/4.2)
.libPaths(C:\Users\benme\AppData\Local\R\win-library\4.2)
.libPaths(C:/Users/benme/AppData/Local/R/win-library/)
.libPaths(C:/Users/benme/AppData/Local/R/win-library)
.libPaths(new=C:/Users/benme/AppData/Local/R/win-library)
.libPaths("C:\Users\benme\AppData\Local\R\win-library\4.2")
.Library()
.libPaths()
library(rstudioapi)
library(xgboost)
library(rstudioapi)
library(xgboost)
library(jsonlite)
install.packages("cli")
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
.libPaths()
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
install.packages("jsonlite")
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
library(rstudioapi)
library(xgboost)
#library(transformer)
#library(attention)
library(tensorflow) #read documentation for installation
library(keras) #read documentation for installation
#library(wateRtemp)
library(data.table)
library(igraph)
library(DiagrammeR)
install.packages('lightgbm')
if(!'lightgbm'%in%installed.packages()){
install.packages('lightgbm')
}
rm(list=ls())
gc()
library(rstudioapi)
library(xgboost)
#library(transformer)
#library(attention)
library(tensorflow) #read documentation for installation https://tensorflow.rstudio.com/install/
library(keras) #read documentation for installation
#library(wateRtemp)
library(data.table)
library(igraph)
library(DiagrammeR)
library(hydroGOF) # archived because dependency hydroTSM was archived
library(tseries)
library(parallel)
library(ParBayesianOptimization)
library(lightgbm)
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
source("functions.R")
# Ticino Bellinzona
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2020.txt",
header = TRUE, sep = ";")
h.data <- data[,c(1,2,5,6)]
dat <- strptime(data$date, format = "%Y-%m-%d")
dat.y <- as.numeric(format(dat, "%Y"))
even <- rep(FALSE,length(dat))
even[61:14549] <- dat.y[61:14549]%%2 == 0
skp <- 1
count <- 0
skipunreg <- NA
for (i in 1981:2020) {
count <- count + 1
if (skp!=3) {skipunreg[count]<-i; skp <- skp + 1}
else {skp <- 1}
}
skipunreg <- skipunreg[!is.na(skipunreg)]
skipunreg <- dat.y%in%skipunreg
valid2 <- rep(FALSE, length(dat.y))
valid2[61:14549] <- skipunreg[61:14549]
nvalid2 <- rep(FALSE, length(dat.y))
nvalid2[61:14549] <- !valid2[61:14549]
h.data$lag1preci <- shift(x=h.data$precipitation.mm.d.,n=1, type= "lag")
h.data$lag2preci <- shift(x=h.data$precipitation.mm.d.,n=2, type= "lag")
h.data$lag3preci <- shift(x=h.data$precipitation.mm.d.,n=3, type= "lag")
h.data$lag4preci <- shift(x=h.data$precipitation.mm.d.,n=4, type= "lag")
h.data$lag5preci <- shift(x=h.data$precipitation.mm.d.,n=5, type= "lag")
h.data$lag6preci <- shift(x=h.data$precipitation.mm.d.,n=6, type= "lag")
h.data$lag7preci <- shift(x=h.data$precipitation.mm.d.,n=7, type= "lag")
h.data$lag1temp <- shift(x=h.data$temperature..C.,n=1, type= "lag")
h.data$lag2temp <- shift(x=h.data$temperature..C.,n=2, type= "lag")
h.data$lag3temp <- shift(x=h.data$temperature..C.,n=3, type= "lag")
h.data$lag4temp <- shift(x=h.data$temperature..C.,n=4, type= "lag")
h.data$lag5temp <- shift(x=h.data$temperature..C.,n=5, type= "lag")
h.data$lag6temp <- shift(x=h.data$temperature..C.,n=6, type= "lag")
h.data$lag7temp <- shift(x=h.data$temperature..C.,n=7, type= "lag")
h.data$sum3preci <- frollsum(x=h.data$precipitation.mm.d., n= 3)
h.data$sum7preci <- frollsum(x=h.data$precipitation.mm.d., n= 7)
h.data$sum30preci <- frollsum(x=h.data$precipitation.mm.d., n= 30)
h.data$mean3temp <- frollmean(x=h.data$temperature..C., n=3, align = "right")
h.data$mean7temp <- frollmean(x=h.data$temperature..C., n=7, align = "right")
h.data$mean30temp <- frollmean(x=h.data$temperature..C., n=30, align = "right")
h.data$mean60temp <- frollmean(x=h.data$temperature..C., n=60, align = "right")
h.data$mean30templag30 <- shift(x=h.data$mean30temp ,n=30, type= "lag")
h.data$sum30precilag30 <- shift(x=h.data$sum30preci ,n=30, type= "lag")
filter <- as.data.frame(h.data$discharge_vol.m3.s.)
filter$lowpass15 <- frollmean(x=h.data$discharge_vol.m3.s., n=15, align = "center")
filter$lowpass31 <- frollmean(x=h.data$discharge_vol.m3.s., n=31, align = "center")
filter$lowpass45 <- frollmean(x=h.data$discharge_vol.m3.s., n=45, align = "center")
filter$lowpass61 <- frollmean(x=h.data$discharge_vol.m3.s., n=61, align = "center")
filter$lowpass121 <- frollmean(x=h.data$discharge_vol.m3.s., n=121, align = "center")
filter$highpass15 <- h.data$discharge_vol.m3.s.-filter$lowpass15
filter$highpass31 <- h.data$discharge_vol.m3.s.-filter$lowpass31
filter$highpass45 <- h.data$discharge_vol.m3.s.-filter$lowpass45
filter$highpass61 <- h.data$discharge_vol.m3.s.-filter$lowpass61
filter$highpass121 <- h.data$discharge_vol.m3.s.-filter$lowpass121
acf(x=h.data$discharge_vol.m3.s.,plot = TRUE, lag.max = 365)
pgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
source("functions.R")
pgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
tt <- lgb.Dataset(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
tes <- lightgbm(data = tt, params = list(objective = "regression"), nrounds = 50)
tes2 <- lgb.cv(data = tt, params = list(objective = "regression",
max_depth = 8,
eta = 0.15,
num_leaves = 35),
nfold = 5, nrounds = 50, early_stopping_rounds = 5)
tes2$record_evals$valid$l2$eval
View(tes2)
source("functions.R")
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
source("functions.R")
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
source("functions.R")
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
h.mean <- lapply(h.data[,c(-1)], FUN = "mean",2, na.rm = TRUE)
h.sd <- lapply(h.data[,c(-1)], FUN = "sd",2)
h.data.scale <- scale(h.data[,c(-1)], center = TRUE)
lstm_mod2 <- bayesOpt_LSTM(x = h.data.scale[valid2,-1], y = h.data.scale[valid2,1], epochs_opt = 10, initPoints = 30)
lstm_mod2$bayes_summary
h.data.lstm_val <- dataPrepLSTM(x = h.data.scale[nvalid2,-1],
y = h.data.scale[nvalid2,1],
timesteps = lstm_mod2$optimized_param$timesteps)
wushu <- h.data$discharge_vol.m3.s.[nvalid2]
wushu <- wushu[-(1:lstm_mod2$optimized_param$timesteps-1)]
pre_lstm <- predict(object = lstm_mod2$optimized_mod, x = h.data.lstm_val$x)
lstm_mod2$bayes_summary
me <- mean(h.data$discharge_vol.m3.s.)
std <- sd(h.data$discharge_vol.m3.s.)
rmse(wushu,pre_lstm*std+me) # 2040 *50.3518+46.78827  2020 *60.357+65.206 [9142:14610]
maxy <- max(pre_lstm*std+me,wushu)
miny <- min(pre_lstm*std+me-wushu)
plot(wushu, type = "l", col = "blue", ylim = c(miny*1.1,maxy*1.1))
lines(pre_lstm*std+me, col = "green")
lines(pre_lstm*std+me-wushu, col = "red")
abline(h=0)
mean(pre_lstm*std+me)
mean(wushu)
NSE(sim = as.matrix(pre_lstm*std+me), obs = as.matrix(wushu))
KGE(sim = as.matrix(pre_lstm*std+me), obs = as.matrix(wushu))
c(1:10)[c(1,1,1,1)]
source("~/R/RainfallRunnoffModel/R/functions.R")
debugSource("~/R/RainfallRunnoffModel/R/model.R")
a <- 1:5
a1 <- 1:5
b1 <- a1^2
plgbm <- predict(object = mdl[[2]], newdata = as.matrix(h.data[nvalid2,3:27]))
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
source("functions.R")
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
plgbm <- predict(object = lgbm_mod[[2]], newdata = as.matrix(h.data[nvalid2,3:27]))
plgbm <- predict(object = lgbm_mod[[3]], newdata = as.matrix(h.data[nvalid2,3:27]))
plgbm <- predict(object = lgbm_mod$optimized_mod, newdata = as.matrix(h.data[nvalid2,3:27]))
plgbm <- predict(object = lgbm_mod$optimized_mod, x = as.matrix(h.data[nvalid2,3:27]))
plgbm <- predict(object = lgbm_mod$optimized_mod, data = as.matrix(h.data[nvalid2,3:27]))
maxy <- max(plgbm,h.data$discharge_vol.m3.s.[nvalid2])*1.1
miny <- min(plgbm-h.data$discharge_vol.m3.s.[nvalid2])*1.1
rmse(h.data$discharge_vol.m3.s.[nvalid2], plgbm)
plot(plgbm, type = "l", col="darkgreen", ylim = c(miny,maxy), main = "main", ylab = "Discharge")
lines(h.data$discharge_vol.m3.s.[nvalid2], col="blue")
lines(plgbm-h.data$discharge_vol.m3.s.[nvalid2], col="red")
abline(h=0)
legend("topright", legend = c("model", "data", "model - data"), bty = "n",
lty = 1, col = c("darkgreen", "blue", "red"))
mean(plgbm)
mean(h.data$discharge_vol.m3.s.[nvalid2])
NSE(sim = as.matrix(plgbm), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
KGE(sim = as.matrix(plgbm), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
lgb.plot.importance(lgb.importance(model=mdl[[2]]))
lgb.plot.importance(lgb.importance(model=lgbm_mod$optimized_mod))
lgb.plot.interpretation(lgb.interprete(lgbm_mod$optimized_mod))
lgb.plot.interpretation(lgb.interprete(model = lgbm_mod$optimized_mod, data = as.matrix(h.data[nvalid2,3:27])))
lgb.plot.interpretation(lgb.interprete(model = lgbm_mod$optimized_mod,
data = as.matrix(h.data[nvalid2,3:27]),
idxset = 1:25))
lgb.plot.interpretation(lgb.interprete(model = lgbm_mod$optimized_mod,
data = as.matrix(h.data[nvalid2,3:27]),
idxset = 3:27))
lgb.plot.interpretation(lgb.interprete(model = lgbm_mod$optimized_mod,
data = as.matrix(h.data[nvalid2,3:27]),
idxset = 3:6))
# Weisse Lütschine Zweilütschinen
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2200.txt",
header = TRUE, sep = ";")
h.data <- data[,c(1,2,5,6)]
dat <- strptime(data$date, format = "%Y-%m-%d")
dat.y <- as.numeric(format(dat, "%Y"))
even <- rep(FALSE,length(dat))
even[61:14549] <- dat.y[61:14549]%%2 == 0
skp <- 1
count <- 0
skipunreg <- NA
for (i in 1981:2020) {
count <- count + 1
if (skp!=3) {skipunreg[count]<-i; skp <- skp + 1}
else {skp <- 1}
}
skipunreg <- skipunreg[!is.na(skipunreg)]
skipunreg <- dat.y%in%skipunreg
valid2 <- rep(FALSE, length(dat.y))
valid2[61:14549] <- skipunreg[61:14549]
nvalid2 <- rep(FALSE, length(dat.y))
nvalid2[61:14549] <- !valid2[61:14549]
h.data$lag1preci <- shift(x=h.data$precipitation.mm.d.,n=1, type= "lag")
h.data$lag2preci <- shift(x=h.data$precipitation.mm.d.,n=2, type= "lag")
h.data$lag3preci <- shift(x=h.data$precipitation.mm.d.,n=3, type= "lag")
h.data$lag4preci <- shift(x=h.data$precipitation.mm.d.,n=4, type= "lag")
h.data$lag5preci <- shift(x=h.data$precipitation.mm.d.,n=5, type= "lag")
h.data$lag6preci <- shift(x=h.data$precipitation.mm.d.,n=6, type= "lag")
h.data$lag7preci <- shift(x=h.data$precipitation.mm.d.,n=7, type= "lag")
h.data$lag1temp <- shift(x=h.data$temperature..C.,n=1, type= "lag")
h.data$lag2temp <- shift(x=h.data$temperature..C.,n=2, type= "lag")
h.data$lag3temp <- shift(x=h.data$temperature..C.,n=3, type= "lag")
h.data$lag4temp <- shift(x=h.data$temperature..C.,n=4, type= "lag")
h.data$lag5temp <- shift(x=h.data$temperature..C.,n=5, type= "lag")
h.data$lag6temp <- shift(x=h.data$temperature..C.,n=6, type= "lag")
h.data$lag7temp <- shift(x=h.data$temperature..C.,n=7, type= "lag")
h.data$sum3preci <- frollsum(x=h.data$precipitation.mm.d., n= 3)
h.data$sum7preci <- frollsum(x=h.data$precipitation.mm.d., n= 7)
h.data$sum30preci <- frollsum(x=h.data$precipitation.mm.d., n= 30)
h.data$mean3temp <- frollmean(x=h.data$temperature..C., n=3, align = "right")
h.data$mean7temp <- frollmean(x=h.data$temperature..C., n=7, align = "right")
h.data$mean30temp <- frollmean(x=h.data$temperature..C., n=30, align = "right")
h.data$mean60temp <- frollmean(x=h.data$temperature..C., n=60, align = "right")
h.data$mean30templag30 <- shift(x=h.data$mean30temp ,n=30, type= "lag")
h.data$sum30precilag30 <- shift(x=h.data$sum30preci ,n=30, type= "lag")
filter <- as.data.frame(h.data$discharge_vol.m3.s.)
filter$lowpass15 <- frollmean(x=h.data$discharge_vol.m3.s., n=15, align = "center")
filter$lowpass31 <- frollmean(x=h.data$discharge_vol.m3.s., n=31, align = "center")
filter$lowpass45 <- frollmean(x=h.data$discharge_vol.m3.s., n=45, align = "center")
filter$lowpass61 <- frollmean(x=h.data$discharge_vol.m3.s., n=61, align = "center")
filter$lowpass121 <- frollmean(x=h.data$discharge_vol.m3.s., n=121, align = "center")
filter$highpass15 <- h.data$discharge_vol.m3.s.-filter$lowpass15
filter$highpass31 <- h.data$discharge_vol.m3.s.-filter$lowpass31
filter$highpass45 <- h.data$discharge_vol.m3.s.-filter$lowpass45
filter$highpass61 <- h.data$discharge_vol.m3.s.-filter$lowpass61
filter$highpass121 <- h.data$discharge_vol.m3.s.-filter$lowpass121
acf(x=h.data$discharge_vol.m3.s.,plot = TRUE, lag.max = 365)
# Dischmabach Davos
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2327.txt",
header = TRUE, sep = ";")
h.data <- data[,c(1,2,5,6)]
dat <- strptime(data$date, format = "%Y-%m-%d")
dat.y <- as.numeric(format(dat, "%Y"))
even <- rep(FALSE,length(dat))
even[61:14549] <- dat.y[61:14549]%%2 == 0
skp <- 1
count <- 0
skipunreg <- NA
for (i in 1981:2020) {
count <- count + 1
if (skp!=3) {skipunreg[count]<-i; skp <- skp + 1}
else {skp <- 1}
}
skipunreg <- skipunreg[!is.na(skipunreg)]
skipunreg <- dat.y%in%skipunreg
valid2 <- rep(FALSE, length(dat.y))
valid2[61:14549] <- skipunreg[61:14549]
nvalid2 <- rep(FALSE, length(dat.y))
nvalid2[61:14549] <- !valid2[61:14549]
h.data$lag1preci <- shift(x=h.data$precipitation.mm.d.,n=1, type= "lag")
h.data$lag2preci <- shift(x=h.data$precipitation.mm.d.,n=2, type= "lag")
h.data$lag3preci <- shift(x=h.data$precipitation.mm.d.,n=3, type= "lag")
h.data$lag4preci <- shift(x=h.data$precipitation.mm.d.,n=4, type= "lag")
h.data$lag5preci <- shift(x=h.data$precipitation.mm.d.,n=5, type= "lag")
h.data$lag6preci <- shift(x=h.data$precipitation.mm.d.,n=6, type= "lag")
h.data$lag7preci <- shift(x=h.data$precipitation.mm.d.,n=7, type= "lag")
h.data$lag1temp <- shift(x=h.data$temperature..C.,n=1, type= "lag")
h.data$lag2temp <- shift(x=h.data$temperature..C.,n=2, type= "lag")
h.data$lag3temp <- shift(x=h.data$temperature..C.,n=3, type= "lag")
h.data$lag4temp <- shift(x=h.data$temperature..C.,n=4, type= "lag")
h.data$lag5temp <- shift(x=h.data$temperature..C.,n=5, type= "lag")
h.data$lag6temp <- shift(x=h.data$temperature..C.,n=6, type= "lag")
h.data$lag7temp <- shift(x=h.data$temperature..C.,n=7, type= "lag")
h.data$sum3preci <- frollsum(x=h.data$precipitation.mm.d., n= 3)
h.data$sum7preci <- frollsum(x=h.data$precipitation.mm.d., n= 7)
h.data$sum30preci <- frollsum(x=h.data$precipitation.mm.d., n= 30)
h.data$mean3temp <- frollmean(x=h.data$temperature..C., n=3, align = "right")
h.data$mean7temp <- frollmean(x=h.data$temperature..C., n=7, align = "right")
h.data$mean30temp <- frollmean(x=h.data$temperature..C., n=30, align = "right")
h.data$mean60temp <- frollmean(x=h.data$temperature..C., n=60, align = "right")
h.data$mean30templag30 <- shift(x=h.data$mean30temp ,n=30, type= "lag")
h.data$sum30precilag30 <- shift(x=h.data$sum30preci ,n=30, type= "lag")
filter <- as.data.frame(h.data$discharge_vol.m3.s.)
filter$lowpass15 <- frollmean(x=h.data$discharge_vol.m3.s., n=15, align = "center")
filter$lowpass31 <- frollmean(x=h.data$discharge_vol.m3.s., n=31, align = "center")
filter$lowpass45 <- frollmean(x=h.data$discharge_vol.m3.s., n=45, align = "center")
filter$lowpass61 <- frollmean(x=h.data$discharge_vol.m3.s., n=61, align = "center")
filter$lowpass121 <- frollmean(x=h.data$discharge_vol.m3.s., n=121, align = "center")
filter$highpass15 <- h.data$discharge_vol.m3.s.-filter$lowpass15
filter$highpass31 <- h.data$discharge_vol.m3.s.-filter$lowpass31
filter$highpass45 <- h.data$discharge_vol.m3.s.-filter$lowpass45
filter$highpass61 <- h.data$discharge_vol.m3.s.-filter$lowpass61
filter$highpass121 <- h.data$discharge_vol.m3.s.-filter$lowpass121
acf(x=h.data$discharge_vol.m3.s.,plot = TRUE, lag.max = 365)
# Thur Andelfingen
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2044.txt",
header = TRUE, sep = ";")
h.data <- data[,c(1,2,5,6)]
dat <- strptime(data$date, format = "%Y-%m-%d")
dat.y <- as.numeric(format(dat, "%Y"))
even <- rep(FALSE,length(dat))
even[61:14549] <- dat.y[61:14549]%%2 == 0
skp <- 1
count <- 0
skipunreg <- NA
for (i in 1981:2020) {
count <- count + 1
if (skp!=3) {skipunreg[count]<-i; skp <- skp + 1}
else {skp <- 1}
}
skipunreg <- skipunreg[!is.na(skipunreg)]
skipunreg <- dat.y%in%skipunreg
valid2 <- rep(FALSE, length(dat.y))
valid2[61:14549] <- skipunreg[61:14549]
nvalid2 <- rep(FALSE, length(dat.y))
nvalid2[61:14549] <- !valid2[61:14549]
h.data$lag1preci <- shift(x=h.data$precipitation.mm.d.,n=1, type= "lag")
h.data$lag2preci <- shift(x=h.data$precipitation.mm.d.,n=2, type= "lag")
h.data$lag3preci <- shift(x=h.data$precipitation.mm.d.,n=3, type= "lag")
h.data$lag4preci <- shift(x=h.data$precipitation.mm.d.,n=4, type= "lag")
h.data$lag5preci <- shift(x=h.data$precipitation.mm.d.,n=5, type= "lag")
h.data$lag6preci <- shift(x=h.data$precipitation.mm.d.,n=6, type= "lag")
h.data$lag7preci <- shift(x=h.data$precipitation.mm.d.,n=7, type= "lag")
h.data$lag1temp <- shift(x=h.data$temperature..C.,n=1, type= "lag")
h.data$lag2temp <- shift(x=h.data$temperature..C.,n=2, type= "lag")
h.data$lag3temp <- shift(x=h.data$temperature..C.,n=3, type= "lag")
h.data$lag4temp <- shift(x=h.data$temperature..C.,n=4, type= "lag")
h.data$lag5temp <- shift(x=h.data$temperature..C.,n=5, type= "lag")
h.data$lag6temp <- shift(x=h.data$temperature..C.,n=6, type= "lag")
h.data$lag7temp <- shift(x=h.data$temperature..C.,n=7, type= "lag")
h.data$sum3preci <- frollsum(x=h.data$precipitation.mm.d., n= 3)
h.data$sum7preci <- frollsum(x=h.data$precipitation.mm.d., n= 7)
h.data$sum30preci <- frollsum(x=h.data$precipitation.mm.d., n= 30)
h.data$mean3temp <- frollmean(x=h.data$temperature..C., n=3, align = "right")
h.data$mean7temp <- frollmean(x=h.data$temperature..C., n=7, align = "right")
h.data$mean30temp <- frollmean(x=h.data$temperature..C., n=30, align = "right")
h.data$mean60temp <- frollmean(x=h.data$temperature..C., n=60, align = "right")
h.data$mean30templag30 <- shift(x=h.data$mean30temp ,n=30, type= "lag")
h.data$sum30precilag30 <- shift(x=h.data$sum30preci ,n=30, type= "lag")
filter <- as.data.frame(h.data$discharge_vol.m3.s.)
filter$lowpass15 <- frollmean(x=h.data$discharge_vol.m3.s., n=15, align = "center")
filter$lowpass31 <- frollmean(x=h.data$discharge_vol.m3.s., n=31, align = "center")
filter$lowpass45 <- frollmean(x=h.data$discharge_vol.m3.s., n=45, align = "center")
filter$lowpass61 <- frollmean(x=h.data$discharge_vol.m3.s., n=61, align = "center")
filter$lowpass121 <- frollmean(x=h.data$discharge_vol.m3.s., n=121, align = "center")
filter$highpass15 <- h.data$discharge_vol.m3.s.-filter$lowpass15
filter$highpass31 <- h.data$discharge_vol.m3.s.-filter$lowpass31
filter$highpass45 <- h.data$discharge_vol.m3.s.-filter$lowpass45
filter$highpass61 <- h.data$discharge_vol.m3.s.-filter$lowpass61
filter$highpass121 <- h.data$discharge_vol.m3.s.-filter$lowpass121
acf(x=h.data$discharge_vol.m3.s.,plot = TRUE, lag.max = 365)
h.weights.max <- rep(1,length(h.data$discharge_vol.m3.s.))
h.weights.min <- rep(1,length(h.data$discharge_vol.m3.s.))
h.weights.max[h.data$discharge_vol.m3.s.>quantile(x=h.data$discharge_vol.m3.s., probs = 0.9)] <- 3
h.weights.min[h.data$discharge_vol.m3.s.>quantile(x=h.data$discharge_vol.m3.s., probs = 0.2)] <- 3
lgbm_mod <- bayesOpt_lgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
plgbm <- predict(object = lgbm_mod$optimized_mod, data = as.matrix(h.data[nvalid2,3:27]))
maxy <- max(plgbm,h.data$discharge_vol.m3.s.[nvalid2])*1.1
miny <- min(plgbm-h.data$discharge_vol.m3.s.[nvalid2])*1.1
rmse(h.data$discharge_vol.m3.s.[nvalid2], plgbm)
plot(plgbm, type = "l", col="darkgreen", ylim = c(miny,maxy), main = "main", ylab = "Discharge")
lines(h.data$discharge_vol.m3.s.[nvalid2], col="blue")
lines(plgbm-h.data$discharge_vol.m3.s.[nvalid2], col="red")
abline(h=0)
legend("topright", legend = c("model", "data", "model - data"), bty = "n",
lty = 1, col = c("darkgreen", "blue", "red"))
mean(plgbm)
mean(h.data$discharge_vol.m3.s.[nvalid2])
NSE(sim = as.matrix(plgbm), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
KGE(sim = as.matrix(plgbm), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
lgb.plot.importance(lgb.importance(model=lgbm_mod$optimized_mod))
mdl <- bayesOpt_xgb(data = as.matrix(h.data[valid2,3:27]), label = h.data[valid2,2])
pxgb1 <- predict(object = mdl[[2]], newdata = as.matrix(h.data[nvalid2,3:27]))
maxy <- max(pxgb1,h.data$discharge_vol.m3.s.[nvalid2])*1.1
miny <- min(pxgb1-h.data$discharge_vol.m3.s.[nvalid2])*1.1
rmse(h.data$discharge_vol.m3.s.[nvalid2], pxgb1)
plot(pxgb1, type = "l", col="darkgreen", ylim = c(miny,maxy), main = "main", ylab = "Discharge")
lines(h.data$discharge_vol.m3.s.[nvalid2], col="blue")
lines(pxgb1-h.data$discharge_vol.m3.s.[nvalid2], col="red")
abline(h=0)
legend("topright", legend = c("model", "data", "model - data"), bty = "n",
lty = 1, col = c("darkgreen", "blue", "red"))
mean(pxgb1)
mean(h.data$discharge_vol.m3.s.[nvalid2])
NSE(sim = as.matrix(pxgb1), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
KGE(sim = as.matrix(pxgb1), obs = as.matrix(h.data$discharge_vol.m3.s.[nvalid2]))
xgb.plot.importance(xgb.importance(model=mdl[[2]]))
source("~/R/RainfallRunnoffModel/R/functions.R")
h.mean <- lapply(h.data[,c(-1)], FUN = "mean",2, na.rm = TRUE)
h.sd <- lapply(h.data[,c(-1)], FUN = "sd",2)
h.data.scale <- scale(h.data[,c(-1)], center = TRUE)
lstm_mod2 <- bayesOpt_LSTM(x = h.data.scale[valid2,-1], y = h.data.scale[valid2,1], epochs_opt = 20, initPoints = 35)
source("~/R/RainfallRunnoffModel/R/functions.R")
save(lstm_thur, file = "../Results/Models/Thur_LSTM.RData")
lstm_mod2$bayes_summary
lstm_thur <- lstm_mod2
save(lstm_thur, file = "../Results/Models/Thur_LSTM.RData")
View(lstm_thur)
h.data.lstm_val <- dataPrepLSTM(x = h.data.scale[nvalid2,-1],
y = h.data.scale[nvalid2,1],
timesteps = lstm_mod2$optimized_param$timesteps)
wushu <- h.data$discharge_vol.m3.s.[nvalid2]
wushu <- wushu[-(1:lstm_mod2$optimized_param$timesteps-1)]
pre_lstm <- predict(object = lstm_mod2$optimized_mod, x = h.data.lstm_val$x)
me <- mean(h.data$discharge_vol.m3.s.)
std <- sd(h.data$discharge_vol.m3.s.)
rmse(wushu,pre_lstm*std+me) # 2040 *50.3518+46.78827  2020 *60.357+65.206 [9142:14610]
maxy <- max(pre_lstm*std+me,wushu)
miny <- min(pre_lstm*std+me-wushu)
plot(wushu, type = "l", col = "blue", ylim = c(miny*1.1,maxy*1.1))
lines(pre_lstm*std+me, col = "green")
lines(pre_lstm*std+me-wushu, col = "red")
abline(h=0)
mean(pre_lstm*std+me)
mean(wushu)
NSE(sim = as.matrix(pre_lstm*std+me), obs = as.matrix(wushu))
KGE(sim = as.matrix(pre_lstm*std+me), obs = as.matrix(wushu))
xgb_thur <- mdl
save(lstm_thur, file = "../Results/Models/Thur_XBoost.RData")
lgb_thur <- lgbm_mod
save(lstm_thur, file = "../Results/Models/Thur_LightGBM.RData")
