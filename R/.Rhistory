x <- mean(4,6,7)
x <- mean(c(4,6,7))
install.packages("tensorflow")
install.packages("keras")
library(tensorflow)
library(keras)
install_tensorflow()
n
lstm_mod <- keras_model_sequential()
install_tensorflow()
install_tensorflow()
library(tensorflow)
library(keras)
install_tensorflow()
lstm_mod <- keras_model_sequential()
lstm_mod <- layer_lstm(object = lstm_mod, units = 20)
library(rstudioapi)
library(xgboost)
library(transformer)
library(attention)
library(tensorflow)
library(keras)
library(wateRtemp)
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
forecast <- read.table(file = "Basel.csv", header = TRUE, sep = ",")
data$DateTime <- strptime(data$DateTime, format = "%Y-%m-%d")
data$sin <- sin(pi / 180 * data$Elev)
data$prod <- data$Einspeisung+data$Batterieladung+data$Direktverbrauch
data$rad <- NA
data$cloudcover <- NA
data$maxtemp <- NA
data$meantemp <- NA
data$rad <- clim$solarradiation[-c(1:12)]
data$cloudcover <- clim$cloudcover[-c(1:12)]
data$maxtemp <- clim$tempmax[-c(1:12)]
data$meantemp <- clim$temp[-c(1:12)]
head(data)
forecast$sin <- sin(pi / 180 * forecast$Elev)
forecast1 <- cbind((forecast[,7]),forecast[,5], forecast[,4],forecast[,2], forecast[,3])
colnames(forecast1) <- c("sin", "rad", "cloudcover", "maxtemp", "meantemp")
forecast1 <- as.matrix(forecast1)
forecast2 <- cbind((forecast[,7]), forecast[,4],forecast[,2], forecast[,3])
colnames(forecast2) <- c("sin", "cloudcover", "maxtemp", "meantemp")
forecast2 <- as.matrix(forecast2)
calib <- 1:370
valid <- 371:414
mean <- lapply(data[calib,c(15:16,18:20)], FUN = "mean",2)
sd <- lapply(data[calib,c(15:16,18:20)], FUN = "sd",2)
data.scale <- scale(data[calib,c(15,16,18:20)])
data.scale.bs <- array(dim=c(363,8,5),data = NA)
for (i in 1:8) {
data.scale.bs[,i,] <- data.scale[(9-i):(371-i),]
}
y <- data[calib,16]
y1 <- matrix(data = y, nrow = 370, ncol = 1)
data.tm <- array(dim = c(8,363,5))
for (i in 1:8) {
data.tm[i,,] <- data.scale.bs[,i,]
}
lstm_mod <- keras_model_sequential()
lstm_mod <- layer_lstm(object = lstm_mod, units = 40, return_sequences = TRUE) %>%
layer_dropout(rate = 0.2) %>%
layer_lstm(units = 80) %>%
#  layer_lstm(units = 10) %>%
layer_dense(units = 1)
compile(lstm_mod, optimizer = "rmsprop", loss = "mse", metrics = "mse")
history_lstm <- fit(object = lstm_mod, x=data.scale.bs[,,-2], y=data.scale.bs[,1,2],
epochs = 15, verbose = 1, shuffle = FALSE, batch_size = 4,
validation_split = 0.15)
library(rstudioapi)
library(xgboost)
#library(transformer)
#library(attention)
library(tensorflow) #read documentation for installation
library(keras) #read documentation for installation
#library(wateRtemp)
library(data.table)
library(igraph)
library(DiagrammeR)
library(hydroGOF)
library(tseries)
library(parallel)
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
source("functions.R")
# Thur Andelfingen
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2044.txt",
header = TRUE, sep = ";")
h.data <- data[,c(1,2,5,6)]
h.data$lag1preci <- shift(x=h.data$precipitation.mm.d.,n=1, type= "lag")
h.data$lag2preci <- shift(x=h.data$precipitation.mm.d.,n=2, type= "lag")
h.data$lag3preci <- shift(x=h.data$precipitation.mm.d.,n=3, type= "lag")
h.data$lag4preci <- shift(x=h.data$precipitation.mm.d.,n=4, type= "lag")
h.data$lag5preci <- shift(x=h.data$precipitation.mm.d.,n=5, type= "lag")
h.data$lag6preci <- shift(x=h.data$precipitation.mm.d.,n=6, type= "lag")
h.data$lag7preci <- shift(x=h.data$precipitation.mm.d.,n=7, type= "lag")
h.data$lag1temp <- shift(x=h.data$temperature..C.,n=1, type= "lag")
h.data$lag2temp <- shift(x=h.data$temperature..C.,n=2, type= "lag")
h.data$lag3temp <- shift(x=h.data$temperature..C.,n=3, type= "lag")
h.data$lag4temp <- shift(x=h.data$temperature..C.,n=4, type= "lag")
h.data$lag5temp <- shift(x=h.data$temperature..C.,n=5, type= "lag")
h.data$lag6temp <- shift(x=h.data$temperature..C.,n=6, type= "lag")
h.data$lag7temp <- shift(x=h.data$temperature..C.,n=7, type= "lag")
h.data$sum3preci <- frollsum(x=h.data$precipitation.mm.d., n= 3)
h.data$sum7preci <- frollsum(x=h.data$precipitation.mm.d., n= 7)
h.data$sum30preci <- frollsum(x=h.data$precipitation.mm.d., n= 30)
h.data$mean3temp <- frollmean(x=h.data$temperature..C., n=3, align = "right")
h.data$mean7temp <- frollmean(x=h.data$temperature..C., n=7, align = "right")
h.data$mean30temp <- frollmean(x=h.data$temperature..C., n=30, align = "right")
h.data$mean60temp <- frollmean(x=h.data$temperature..C., n=60, align = "right")
h.data$mean30templag30 <- shift(x=h.data$mean30temp ,n=30, type= "lag")
h.data$sum30precilag30 <- shift(x=h.data$sum30preci ,n=30, type= "lag")
filter <- as.data.frame(h.data$discharge_vol.m3.s.)
filter$lowpass15 <- frollmean(x=h.data$discharge_vol.m3.s., n=15, align = "center")
filter$lowpass31 <- frollmean(x=h.data$discharge_vol.m3.s., n=31, align = "center")
filter$lowpass45 <- frollmean(x=h.data$discharge_vol.m3.s., n=45, align = "center")
filter$lowpass61 <- frollmean(x=h.data$discharge_vol.m3.s., n=61, align = "center")
filter$lowpass121 <- frollmean(x=h.data$discharge_vol.m3.s., n=121, align = "center")
filter$highpass15 <- h.data$discharge_vol.m3.s.-filter$lowpass15
filter$highpass31 <- h.data$discharge_vol.m3.s.-filter$lowpass31
filter$highpass45 <- h.data$discharge_vol.m3.s.-filter$lowpass45
filter$highpass61 <- h.data$discharge_vol.m3.s.-filter$lowpass61
filter$highpass121 <- h.data$discharge_vol.m3.s.-filter$lowpass121
acf(x=h.data$discharge_vol.m3.s.,plot = TRUE, lag.max = 365)
h.weights.max <- rep(1,length(h.data$discharge_vol.m3.s.))
h.weights.min <- rep(1,length(h.data$discharge_vol.m3.s.))
h.weights.max[h.data$discharge_vol.m3.s.>quantile(x=h.data$discharge_vol.m3.s., probs = 0.9)] <- 13
h.weights.min[h.data$discharge_vol.m3.s.>quantile(x=h.data$discharge_vol.m3.s., probs = 0.2)] <- 13
calib.h <- 61:9132
valid.h <- 9133:14549 #14610
h.data.calib <- h.data[calib.h,]
h.data.valid <- h.data[valid.h,]
test <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(10,0.75))
source("functions.R")
source("functions.R")
source("functions.R")
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
source("functions.R")
test <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(10,0.75))
gitcreds::gitcreds_set()
install.packages("gitcreds")
install.packages("gitcreds")
gitcreds::gitcreds_set()
View(test)
set_github_pat()
install.packages("credentials")
library(credentials)
set_github_pat()
credentials::set_github_pat()
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
library(rstudioapi)
library(xgboost)
#library(transformer)
#library(attention)
library(tensorflow) #read documentation for installation
library(keras) #read documentation for installation
#library(wateRtemp)
library(data.table)
library(igraph)
library(DiagrammeR)
library(hydroGOF)
library(tseries)
library(parallel)
wd <- getSourceEditorContext()$path
wd <- substring(wd, first = 1 , last = tail(unlist(gregexpr('/', wd)), n=1)-1)
setwd(wd)
source("functions.R")
# Thur Andelfingen
data <- read.table(file = "../Data/Discharge/1 - priority/CAMELS_CH_obs_based_2044.txt",
header = TRUE, sep = ";")
time1 <- Sys.time()
print(paste("optimization completed in: ", time1-sys.time()))
print(paste("optimization completed in: ", time1-Sys.time()))
print(paste("optimization completed in: ", Sys.time()-time1))
print(paste("optimization completed in: ", (Sys.time()-time1)%%60))
print(paste("optimization completed in: ", (Sys.time()-time1)%/%60))
print(paste("optimization completed in: ", (Sys.time()-time1)))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
as.numeric(Sys.time())
print(paste("optimization completed in: ", Sys.time()-time1))
time1 <- as.numeric(Sys.time())
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
31%%5
31%/%5
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)%/%60, " minutes ",
as.numeric(Sys.time()-time1)%%60, " seconds"))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)%/%60, " minutes ",
round(as.numeric(Sys.time()-time1)%%60), " seconds"))
print(paste("optimization completed in: ", as.numeric(Sys.time()-time1)%/%60, " minutes ",
round(as.numeric(Sys.time()-time1)%%60, digits = 1), " seconds"))
test <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(2,0.75))
source("functions.R")
View(test)
test <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(2,0.75))
View(test)
test1 <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
vdata = as.matrix(h.data[valid.h,3:27]), vlabel = h.data[valid.h,2])
View(test1)
tail(1:10, n=1)
source("functions.R")
test2 <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(2,0.75))
View(test2)
apply(matrix(data = 1:100, nrow = 20, ncol = 5), MARGIN = 1, FUN = mean)
matrix(data = 1:100, nrow = 20, ncol = 5)
source("functions.R")
test2 <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(2,0.75))
source("functions.R")
test2 <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(2,0.75))
match(4,1:20)
pxgb1 <- predict(object = test[[1]], newdata = as.matrix(h.data[valid.h,3:27]))
maxy <- max(pxgb1,h.data$discharge_vol.m3.s.[valid.h])*1.1
miny <- min(pxgb1-h.data$discharge_vol.m3.s.[valid.h])*1.1
plot(pxgb1, type = "l", col="darkgreen", ylim = c(miny,maxy), main = "main")
lines(h.data$discharge_vol.m3.s.[valid.h], col="blue")
lines(pxgb1-h.data$discharge_vol.m3.s.[valid.h], col="red")
abline(h=0)
legend("topright", legend = c("model", "data", "model - data"), bty = "n",
lty = 1, col = c("darkgreen", "blue", "red"))
mean(pxgb1)
mean(h.data$discharge_vol.m3.s.[valid.h])
NSE(sim = as.matrix(pxgb1), obs = as.matrix(h.data$discharge_vol.m3.s.[valid.h]))
KGE(sim = as.matrix(pxgb1), obs = as.matrix(h.data$discharge_vol.m3.s.[valid.h]))
b_ <- matrix(1:100, nrow = 20, ncol = 5)
View(b_)
s_ <- apply(b_, MARGIN = 1, FUN = mean)
best <- match(min(s_, na.rm = TRUE),s_)
match(min(s_, na.rm = TRUE),s_)
b_[1,1] <- 100
s_ <- apply(b_, MARGIN = 1, FUN = mean)
match(min(s_, na.rm = TRUE),s_)
source("functions.R")
test2 <- optimize_xgb(data = as.matrix(h.data.calib[,3:27]),label = h.data.calib[,2],
bt = c(3,0.8))
View(test2)
calib.h <- 61:14549
test2 <- optimize_xgb(data = as.matrix(h.data[calib.h,3:27]),label = h.data[calib.h,2],
bt = c(3,0.8))
bt <- c(5,0.8)
bt <- c(5,0.8)
for (i in 1:bt[1]) {
start[1] <- runif(n=1, min=1, max=floor(nrow(data)*bt[2]))
start[2] <- start[1]+floor(nrow(data)*(1-bt[2]))
bt_sample[start[1]:start[2],i] <- FALSE
}
bt <- c(5,0.8)
for (i in 1:bt[1]) {
start1[1] <- runif(n=1, min=1, max=floor(nrow(data)*bt[2]))
start1[2] <- start1[1]+floor(nrow(data)*(1-bt[2]))
bt_sample[start1[1]:start1[2],i] <- FALSE
}
start1 <- c(1,1)
bt <- c(5,0.8)
for (i in 1:bt[1]) {
start1[1] <- runif(n=1, min=1, max=floor(nrow(data)*bt[2]))
start1[2] <- start1[1]+floor(nrow(data)*(1-bt[2]))
bt_sample[start1[1]:start1[2],i] <- FALSE
}
bt_sample <- matrix(TRUE, nrow = nrow(data), ncol = bt[1])
start1 <- c(1,1)
bt <- c(5,0.8)
for (i in 1:bt[1]) {
start1[1] <- runif(n=1, min=1, max=floor(nrow(data)*bt[2]))
start1[2] <- start1[1]+floor(nrow(data)*(1-bt[2]))
bt_sample[start1[1]:start1[2],i] <- FALSE
}
View(bt_sample)
bt_sample <- matrix(TRUE, nrow = nrow(data), ncol = bt[1])
start1 <- c(1,1)
bt <- c(5,0.8)
for (i in 1:bt[1]) {
start1[1] <- runif(n=1, min=1, max=floor(nrow(data)*bt[2]))
start1[2] <- start1[1]+floor(nrow(data)*(1-bt[2]))
bt_sample[start1[1]:start1[2],i] <- FALSE
}
source("functions.R")
test2 <- optimize_xgb(data = as.matrix(h.data[calib.h,3:27]),label = h.data[calib.h,2],
bt = c(3,0.75))
source("functions.R")
calib.h <- 61:14549
test2 <- optimize_xgb(data = as.matrix(h.data[calib.h,3:27]),label = h.data[calib.h,2],
bt = c(3,0.75))
test2[6]
min(test2[6])
min(as.matrix(test2[6]))
min(as.matrix(test2[[6]]))
min(test2[[6]])
summary(test2[[2]])
summary(test2[[6]])
